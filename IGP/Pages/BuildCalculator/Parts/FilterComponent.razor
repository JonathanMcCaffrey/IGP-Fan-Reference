@inject IJSRuntime jsRuntime;

<FormLayoutComponent>
    <FormSelectComponent OnChange="@OnFactionChanged">
        <FormLabelComponent>Faction</FormLabelComponent>
        <ChildContent>
            <option value="@FactionType.Aru">Aru</option>
            <option value="@FactionType.QRath" selected>Q'Rath</option>
        </ChildContent>
    </FormSelectComponent>

    <FormSelectComponent OnChange="@OnImmortalChanged">
        <FormLabelComponent>Immortal</FormLabelComponent>
        <ChildContent>
            @if (FilterService.GetFactionType() == FactionType.QRath)
            {
                <option value="@DataType.IMMORTAL_Orzum" selected>Orzum</option>
                <option value="@DataType.IMMORTAL_Ajari">Ajari</option>
            }
            @if (FilterService.GetFactionType() == FactionType.Aru)
            {
                <option value="@DataType.IMMORTAL_Mala" selected>Mala</option>
                <option value="@DataType.IMMORTAL_Xol">Xol</option>
            }
        </ChildContent>
    </FormSelectComponent>
</FormLayoutComponent>

@code {

    [Inject]
    public IImmortalSelectionService FilterService { get; set; } = default!;

    void OnFactionChanged(ChangeEventArgs e)
    {
        FilterService.SelectFactionType(e.Value!.ToString()!);
    }

    void OnImmortalChanged(ChangeEventArgs e)
    {
        FilterService.SelectImmortalType(e.Value!.ToString()!);
    }

    protected override bool ShouldRender()
    {
#if DEBUG
        jsRuntime.InvokeVoidAsync("console.time", "FilterComponent");
#endif
        
        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
#if DEBUG
        jsRuntime.InvokeVoidAsync("console.timeEnd", "FilterComponent");
#endif
    }
}