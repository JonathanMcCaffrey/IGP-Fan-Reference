@inject IJSRuntime jsRuntime;


@implements IDisposable

<div class="highlightsContainer">
    <div>
        <div>Requested</div>
        
        @foreach (var ordersAtTime in BuildOrderService.StartedOrders.Reverse()) {
                    foreach (var order in ordersAtTime.Value)
                    {
                        <div>
                                
                            @ordersAtTime.Key | T @Interval.ToTime(ordersAtTime.Key)
                        </div>
                        <div>
                            @order.Info().Name
                        </div>
                        <br/>
                    }
                }

    </div>
    <div>
        <div>Finished</div>
        
        @foreach (var ordersAtTime in BuildOrderService.CompletedOrders.Reverse())
        {
            foreach (var order in ordersAtTime.Value)
            {
                <div>
                        
                    @ordersAtTime.Key | T @Interval.ToTime(ordersAtTime.Key)
                </div>
                <div>
                    @order.Info().Name
                </div>
                <br/>
            }
        }
    </div>

</div>

<style>
    .highlightsContainer {
        overflow-y: scroll;
        overflow-x: hidden;
        height: 400px;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 4px;
    }
</style>

@code {

    [Inject]
    IEconomyService EconomyService { get; set; } = default!;

    [Inject]
    IBuildOrderService BuildOrderService { get; set; } = default!;

    [Inject]
    ITimingService TimingService { get; set; } = default!;

    protected override void OnInitialized()
    {
        EconomyService.Subscribe(StateHasChanged);
        BuildOrderService.Subscribe(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        EconomyService.Unsubscribe(StateHasChanged);
        BuildOrderService.Unsubscribe(StateHasChanged);
    }
    
    protected override bool ShouldRender()
    {
#if DEBUG
        jsRuntime.InvokeVoidAsync("console.time", "HighlightsComponent");
#endif
        
        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
#if DEBUG
        jsRuntime.InvokeVoidAsync("console.timeEnd", "HighlightsComponent");
#endif
    }

}