@layout PageLayout

@page "/database/{text}"

@inject IEntityDisplayService entityDisplayService

@implements IDisposable

<LayoutLargeContentComponent>

    <PaperComponent>
        <FormDisplayComponent Label="Patch">
            <Display>
                Game Patch: @EntityModel.GameVersion
            </Display>
        </FormDisplayComponent>
    </PaperComponent>

    <div style="margin-left: 8px">
        <ButtonGroupComponent OnClick="choice => { entityDisplayService.SetDisplayType(choice); }" Choice="@entityDisplayService.GetDisplayType()" Choices="@entityDisplayService.DefaultChoices()"></ButtonGroupComponent>
    </div>


    @if (Text!.Trim().ToLower().Equals("walter"))
    {
        <PaperComponent>
            <CodeComponent>
                Unhandled Exception: EXCEPTION_MEMORY_SIZE_VIOLATION
                UNIT_WALTER too powerful to be displayed.

                This SHOULD NEVER HAPPEN!
            </CodeComponent>
        </PaperComponent>
    }
    else if (entity == null)
    {
        <PaperComponent>
            <div>Invalid entity name entered: @Text</div>
            <div>No such entity. Did you mean <b>"Throne"</b>?</div>
        </PaperComponent>
    }

    else
    {
        <PaperComponent>
            <CascadingValue Value="entity">
                <CascadingValue Value="@entityDisplayService.GetDisplayType()">

                    <EntityViewComponent></EntityViewComponent>
                </CascadingValue>
            </CascadingValue>

        </PaperComponent>
    }

</LayoutLargeContentComponent>


@code {

    [Parameter]
    public string? Text { get; set; }

    private EntityModel? entity;

    protected override void OnInitialized()
    {
        entityDisplayService.Subscribe(StateHasChanged);

        foreach (var e in DATA.Get().Values)
        {
            if (e.Info().Name.ToLower().Equals(Text!.ToLower()))
            {
                entity = e;
                return;
            }
        }
    }

    void IDisposable.Dispose()
    {
        entityDisplayService.Unsubscribe(StateHasChanged);
    }

}