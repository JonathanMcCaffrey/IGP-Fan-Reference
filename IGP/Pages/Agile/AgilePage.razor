@implements IDisposable;
@inject IAgileService AgileService;

@layout PageLayout

@page "/agile"

@if (AgileService.IsLoaded()) {
    <LayoutMediumContentComponent>

        <WebsiteTitleComponent>Agile</WebsiteTitleComponent>

        <div class="agileViewContainer">
            @foreach (var sprint in AgileService.SprintModels.OrderBy(e => e.EndDate).Reverse()) {
                <details class="sprintDisplayContainer @sprint.GetSprintType().ToLower()" open="@(sprint.GetSprintType() == SprintType.Current)">
                    <summary class="sprintSummary">
                        <div class="sprintTitle">@sprint.Name</div>
                        <div style="flex: 1; flex-grow: 1;"></div>
                        <div class="sprintDates">
                            <div class="sprintStartDate">
                               @if (sprint.StartDate != null)
                               {
                                    <b>Start: </b>@sprint.StartDate.Value.ToString("dd/MM/yyyy")
                               }
                            </div>
                            <div class="sprintEndDate">
                                @if (sprint.EndDate != null)
                               {
                                    <b>End: </b>@sprint.EndDate.Value.ToString("dd/MM/yyyy")
                               }

                            </div>
                        </div>
                    </summary>
                    <SprintComponent Sprint=sprint Tasks=AgileService.TaskModels></SprintComponent>
                </details>
            }

            <details class="sprintDisplayContainer">
                <summary class="sprintSummary">
                    <div class="sprintTitle">Backlog</div>
                    <div style="flex: 1; flex-grow: 1;"></div>
                </summary>
                <div>
                    <BacklogComponent Backlog=backlog></BacklogComponent>
                </div>
            </details>
        </div>

        <ContentDividerComponent></ContentDividerComponent>

        <InfoBodyComponent>
            <InfoQuestionComponent>What is Agile?</InfoQuestionComponent>
            <InfoAnswerComponent>
                Agile is a work methodology for determing task assignment and release deadlines.
                <br/><br/>
                My agile practice will be creating tasks in a backlog. Assigning them to weekly sprints. And completing all tasks in the allotted time frame.
                <br/><br/>
                Any unfinished tasks are moved into the next sprint, or the sprint will be extended by a week.
            </InfoAnswerComponent>
        </InfoBodyComponent>
    </LayoutMediumContentComponent>
}
else {
    <LoadingComponent></LoadingComponent>
    
}


@code {

#if NO_SQL
    [Parameter]
    public List<TaskModel> Tasks { get; set; }

    [Parameter]
    public List<SprintModel> Sprints { get; set; }
#else
    [Inject]
    DatabaseContext Database { get; set; }

    [Parameter]
    public DbSet<TaskModel> Tasks { get; set; }
    
    [Parameter]
    public DbSet<SprintModel> Sprints { get; set; }
#endif

    private readonly List<TaskModel> backlog = new();

    protected override void OnInitialized() {
        AgileService.Subscribe(HasChanged);
    }

    void IDisposable.Dispose() {
        AgileService.Unsubscribe(HasChanged);
    }

    void HasChanged() {
        Sprints = AgileService.SprintModels;
        Tasks = AgileService.TaskModels;

        backlog.Clear();

        foreach (var task in Tasks) {
            if (task.SprintModelId == null) {
                backlog.Add(task);
            }
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync() {
#if NO_SQL
        await AgileService.Load();
#else
        await AgileService.Load(Database);
#endif
    }

}