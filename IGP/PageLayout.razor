@inherits LayoutComponentBase
@inject ISearchService SearchService
@inject IWebsiteService WebService
@inject IDataCollectionService DataCollectionService
@inject NavigationManager NavigationManager
@using Services.Website
@implements IDisposable

<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudButton Class="ml-3 mr-8"
                   Href="/"
                   Target="_self"
                   Variant="Variant.Text"
                   Color="Color.Default">
            <MudText Typo="Typo.h5"> IGP Fan Reference</MudText>
        </MudButton>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <MudButton Href="/build-calculator"
                       Variant="Variant.Text"
                       Color="Color.Default"
                       Class="mr-4">
                <MudIcon Icon="fa-solid fa-helmet-battle" Class="mr-2" />
                Build Calculator
            </MudButton>
            <MudButton Href="/harass-calculator"
                       Variant="Variant.Text"
                       Color="Color.Default"
                       Class="mr-4">
                <MudIcon Icon="fa-solid fa-bow-arrow" Class="mr-2" />
                Harass Calculator
            </MudButton>
            <MudButton Href="/database"
                       Variant="Variant.Text"
                       Color="Color.Default"
                       Class="mr-4">
                <MudIcon Icon="fa-solid fa-clipboard-list" Class="mr-2" />
                Database
            </MudButton>
        </MudHidden>
        <MudSpacer />
        <SearchButtonComponent Id="desktop-searchButton" />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <MudPaper Width="250px" Class="d-inline-flex py-3" Elevation="0">
                <MudNavMenu Class="mud-width-full flex-grow-1">
                    <MudNavLink Href="/build-calculator" Icon="fa-solid fa-helmet-battle">Build Calculator</MudNavLink>
                    <MudNavLink Href="/harass-calculator" Icon="fa-solid fa-bow-arrow">Harass Calculator</MudNavLink>
                    <MudNavLink Href="/database" Icon="fa-solid fa-clipboard-list">Database</MudNavLink>
                    <MudSpacer />
                    <MudDivider Class="my-2" />
                    <MudNavLink Href="/settings" Icon="fa-solid fa-gear">Settings</MudNavLink>
                    <MudDivider Class="my-2" />
                </MudNavMenu>
            </MudPaper>
        </MudDrawer>
    </MudHidden>

    <MudMainContent>
        <MudContainer Class="px-8" MaxWidth="MaxWidth.False">
            <div id="content" class="content">
                @Body
            </div>
        </MudContainer>
    </MudMainContent>
</MudLayout>


<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

@code {

    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider;

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        WebService.Subscribe(HasChanged);

        CollectFirstPageLoaded();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //TODO: Support light mode
            //_isDarkMode = await _mudThemeProvider.GetSystemPreference();
            //StateHasChanged();
        }
    }

    private void CollectFirstPageLoaded()
    {
        var skipBaseUri = NavigationManager.Uri.Substring(NavigationManager.BaseUri.Length,
            NavigationManager.Uri.Length - NavigationManager.BaseUri.Length);
        var rootUrl = skipBaseUri.Split("/").First();
        if (rootUrl.Trim().Equals(""))
        {
            rootUrl = "home";
        }

        DataCollectionService.SendEvent(DataCollectionKeys.FirstPage,
            new Dictionary<string, string> { { "page", rootUrl } });
    }

    protected override async Task OnInitializedAsync()
    {
        await WebService.Load();

        await Focus();
    }

    private async Task Focus()
    {
        //   await jsRuntime.InvokeVoidAsync("SetFocusToElement", pageContents);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        // await jsRuntime.InvokeVoidAsync("SetFocusToElement", pageContents);
    }

    void IDisposable.Dispose()
    {
        WebService.Unsubscribe(HasChanged);
    }

    void HasChanged()
    {
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs keyboardEventArgs)
    {
        if ((keyboardEventArgs.CtrlKey || keyboardEventArgs.MetaKey) && keyboardEventArgs.Key.ToLower() == "k")
        {
            SearchService.Show();
        }
    }


}